{"name":"Ant-phptools","tagline":"A Composer-friendly port of the PEAR-based Template for Jenkins Jobs for PHP Projects (http://jenkins-php.org)","body":"ant-phptools\r\n================\r\n\r\nA Composer-friendly port of the PEAR-based Template for Jenkins Jobs for PHP Projects (http://jenkins-php.org)\r\n\r\n## Theory of operation\r\n\r\nWhile the Jenkins Jobs relies on PEAR, this port relies on the new hotness that is Composer (http://getcomposer.org/).\r\nWhile PEAR is a system-level library container, Composer is an application-level dependency manager, which allows more granularity of control over which libraries and version are required for use.\r\nTo get around the need for granular controls for testing, a Jenkins admin would have to install ALL the dependencies system-wide to meet any variety of testing criteria (TDD, BDD, SpecBDD, etc).\r\n\r\nThis library gets around this by keeping in sync with the application composer dependencies. It has hooks for:\r\n\r\n* PHPUnit (https://github.com/sebastianbergmann/phpunit)\r\n* Behat (http://behat.org/)\r\n* PHPSpec2 (http://phpspec.net/)\r\n* phpmd (PHP Mess Detector - http://phpmd.org/)\r\n* phpcb (PHP Code Browser - https://github.com/Mayflower/PHP_CodeBrowser)\r\n* phpcpd (PHP Copy Paste Detector - https://github.com/sebastianbergmann/phpcpd)\r\n* phploc (PHP Lines of Code - https://github.com/sebastianbergmann/phploc)\r\n* phpcs (PHP_CodeSniffer - https://github.com/squizlabs/PHP_CodeSniffer)\r\n* pdepend (PHP_Depend - http://pdepend.org/)\r\n\r\n\r\n## Usage\r\n\r\nClone or download this repo into a location readable by ant:\r\n\r\n```shell\r\ngit clone https://github.com/shrikeh/ant-phptools.git\r\n```\r\n\r\nThen, in your ant `build.xml` file, reference the `tests.xml` file by `<include>` (not `<import>`):\r\n\r\n```xml\r\n<include file=\"${basedir}/ant-phptools/tests.xml\"/>\r\n```\r\n\r\nTo use the tests, you can then simply add a reference to the tests within, such as:\r\n```xml\r\n<target name=\"test\" depends=\"prepare, phptools.phptests-parallel\" />\r\n```\r\n\r\nFor every existing hook, the tools will check to see if the corresponding phar is available, and if so, it will assume the target is to be run. Thus, by adding or subtracting from your require-dev section of the `composer.json` file, your ant file will automatically run the new automated testing referenced.\r\n\r\nThese tools assume you have your tools installed to `vendor/bin`. To achieve this, add the following to your `composer.json` file:\r\n\r\n```json\r\n    \"config\": {\r\n        \"bin-dir\": \"vendor/bin\"\r\n    },\r\n\r\n```\r\nHowever, you don't need to do this if you don't want to. There are a couple of variables you can change either in a properties file or in your build.xml to change this.\r\n\r\nIf you want to change the bin-dir globally, set a variable called `phptools.bindir` in your `build.xml` file:\r\n\r\n```xml\r\n<property name=\"phptools.bindir\" value=\"/path/to/tools/bin\" />\r\n```\r\n\r\nOr in your `.properties` file:\r\n```\r\nphptools.bindir = /path/to/tools/bin\r\n```\r\n\r\nIf you don't use a bin dir for your tools, you can override either the path, the file, or both, for each tool:\r\n\r\n```xml\r\n<property name=\"phptools.phpdox.phar\" value=\"/path/to/phpdox/phar\" />\r\n<property name=\"phptools.phpunit.phar.path\" value=\"/path/to/phpunit\" />\r\n```\r\nEach `phar` variable is constructed in the following format:\r\n\r\n```\r\nphptools.[tool].phar = ${phptools.[tool].phar.path}/${phptools.[tool].phar.file}\r\n\r\n```\r\n\r\nWhich allows you to change either the path or the file, or simply override the resultant `.phar` variable if you prefer.\r\n\r\n\r\n## Further configuration\r\nBy default, the `tests.xml` uses sensible Symfony-style defaults for paths. However, ALL of the variables it uses are variables, allowing as much configuration as you wish.\r\n\r\nThere are several ways to configure the include:\r\n\r\n* If you do not wish to use the default `php-build-tools.properties` file, copy the file, alter the values you wish, and simply set the `${phptools.properties}` to the path of the new file:\r\n\r\n```xml\r\n<property name=\"${phptools.properties}\" location=\"phptools.properties.local\" />\r\n```\r\n* Alternatively, you can set individual values. Because ant works on the theory that variables already configured are read only, you can set variables prior to running the `tests-parallel` target and all will be well.\r\n\r\n\r\n\r\n","google":"UA-39890160-2","note":"Don't delete this file! It's used internally to help with page regeneration."}